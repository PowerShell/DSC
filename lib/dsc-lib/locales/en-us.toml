_version = 1

[configure.config_doc]
configurationDocumentSchemaTitle = "Configuration document schema URI"
configurationDocumentSchemaDescription = "Defines the JSON Schema the configuration document adheres to."
skippingResource = "Skipping resource '%{name}' due to condition '%{condition}' with result '%{result}'"

[configure.constraints]
minLengthIsNull = "Parameter '%{name}' has minimum length constraint but is null"
notMinLength = "Parameter '%{name}' has minimum length constraint of %{min_length} but is %{length}"
minLengthNotStringOrArray = "Parameter '%{name}' has minimum length constraint but is not a string or array"

maxLengthIsNull = "Parameter '%{name}' has maximum length constraint but is null"
maxLengthExceeded = "Parameter '%{name}' has maximum length constraint of %{max_length} but is %{length}"
maxLengthNotStringOrArray = "Parameter '%{name}' has maximum length constraint but is not a string or array"

minValueIsNull = "Parameter '%{name}' has minimum value constraint but is null"
notMinValue = "Parameter '%{name}' has minimum value constraint of %{min_value} but is %{value}"
minValueNotInteger = "Parameter '%{name}' has minimum value constraint but is not an integer"
maxValueIsNull = "Parameter '%{name}' has maximum value constraint but is null"
notMaxValue = "Parameter '%{name}' has maximum value constraint of %{max_value} but is %{value}"
maxValueNotInteger = "Parameter '%{name}' has maximum value constraint but is not an integer"

allowedValuesIsNull = "Parameter '%{name}' has allowed values constraint but is null"
notAllowedValue = "Parameter '%{name}' has allowed values constraint but is not in the list of allowed values"
allowedValuesNotStringOrInteger = "Parameter '%{name}' has allowed values constraint but is not a string or integer"

[configure.dependsOn]
duplicateResource = "Resource named '%{name}' for type '%{type_name}' is specified more than once in the configuration"
syntaxIncorrect = "'dependsOn' syntax is incorrect: %{dependency}"
dependencyNotFound = "'dependsOn' resource name '%{dependency_name}' does not exist for resource named '%{resource_name}'"
dependencyTypeMismatch = "'dependsOn' resource type '%{resource_type}' does not match resource type '%{dependency_type}' for resource named '%{resource_name}'"
resourceNotInOrder = "Resource not found in order"
dependencyNotInOrder = "Dependency not found in order"
circularDependency = "Circular dependency detected for resource named '%{resource}'"
invocationOrder = "Resource invocation order"

[configure.mod]
nestedArraysNotSupported = "Nested arrays not supported"
arrayElementCouldNotTransformAsString = "Array element could not be transformed as string"
valueCouldNotBeTransformedAsString = "Property value '%{value}' could not be transformed as string"
elevationRequired = "Elevated security context required"
restrictedRequired = "Restricted security context required"
desired = "Desired state: %{state}"
handlesExist = "Resource handles _exist or _exist is true"
implementsDelete = "Resource implements delete and _exist is false"
groupNotSupportedForDelete = "Group resources not supported for delete"
deleteNotSupported = "Resource '%{resource}' does not support `delete` and does not handle `_exist` as false"
expectedState = "Expected state: %{state}"
exportInput = "Export input: %{input}"
noParameters = "No parameters defined in configuration and no parameters input"
noParametersDefined = "No parameters defined in configuration"
processingParameter = "Processing parameter '%{name}'"
setDefaultParameter = "Set default parameter '%{name}'"
defaultStringNotDefined = "Default value as string is not defined"
setSecureParameter = "Set secure parameter '%{name}'"
setParameter = "Set parameter '%{name}' to '%{value}'"
parameterNotDefined = "Parameter '%{name}' is not defined in configuration"
noVariables = "No variables defined in configuration"
setVariable = "Set variable '%{name}' to '%{value}'"
parameterNotString = "Parameter '%{name}' is not a string"
parameterNotInteger = "Parameter '%{name}' is not an integer"
parameterNotBoolean = "Parameter '%{name}' is not a boolean"
parameterNotArray = "Parameter '%{name}' is not an array"
parameterNotObject = "Parameter '%{name}' is not an object"
invokePropertyExpressions = "Invoke property expressions"
invokeExpression = "Invoke property expression for %{name}: %{value}"
propertyNotString = "Property '%{name}' with value '%{value}' is not a string"
metadataMicrosoftDscIgnored = "Resource returned '_metadata' property 'Microsoft.DSC' which is ignored"
metadataNotObject = "Resource returned '_metadata' property which is not an object"
metadataRestartRequiredInvalid = "Resource returned '_metadata' property '_restartRequired' which contains invalid value: %{value}"
schemaExcludesMetadata = "Will not add '_metadata' to properties because resource schema does not support it"
validateCopy = "Validating copy for resource '%{name}' with count %{count}"
unrollingCopy = "Unrolling copy for resource '%{name}' with count %{count}"
copyModeNotSupported = "Copy mode is not supported"
copyBatchSizeNotSupported = "Copy batch size is not supported"
copyNameResultNotString = "Copy name result is not a string"
nameResultNotString = "Resource name result is not a string"
circularDependency = "Circular dependency or unresolvable parameter references detected in parameters: %{parameters}"
userFunctionAlreadyDefined = "User function '%{name}' in namespace '%{namespace}' is already defined"
addingUserFunction = "Adding user function '%{name}'"
copyCountResultNotInteger = "Copy count result is not an integer: %{expression}"
skippingOutput = "Skipping output for '%{name}' due to condition evaluating to false"
secureOutputSkipped = "Secure output '%{name}' is skipped"
outputTypeNotMatch = "Output '%{name}' type does not match expected type '%{expected_type}'"
copyNotSupported = "Copy for output '%{name}' is currently not supported"

[discovery.commandDiscovery]
couldNotReadSetting = "Could not read 'resourcePath' setting"
appendingEnvPath = "Appending PATH to resourcePath"
originalPath = "Original PATH: %{path}"
failedGetEnvPath = "Failed to get PATH environment variable"
failedJoinEnvPath = "Failed to join PATH environment variable"
exeHomeAlreadyInPath = "Exe home is already in path: %{path}"
addExeHomeToPath = "Adding exe home to path: %{path}"
usingResourcePath = "Using Resource Path: %{path}"
discoverResources = "Discovering '%{kind}' using filter: %{filter}"
invalidAdapterFilter = "Could not build Regex filter for adapter name"
progressSearching = "Searching for resources"
extensionSearching = "Searching for extensions"
foundManifest = "Found manifest: %{path}"
extensionFound = "Extension '%{extension}' version %{version} found"
adapterFound = "Resource adapter '%{adapter}' version %{version} found"
resourceFound = "Resource '%{resource}' version %{version} found"
executableNotFound = "Executable '%{executable}' not found for operation '%{operation}' for resource '%{resource}'"
extensionInvalidVersion = "Extension '%{extension}' version '%{version}' is invalid"
invalidResourceManifest = "Invalid manifest for resource '%{resource}'"
invalidExtensionManifest = "Invalid manifest for extension '%{extension}'"
invalidManifestList = "Invalid manifest list '%{resource}': %{err}"
invalidManifestFile = "Invalid manifest file '%{resource}': %{err}"
extensionResourceFound = "Extension found resource '%{resource}'"
callingExtension = "Calling extension '%{extension}' to discover resources"
extensionFoundResources = "Extension '%{extension}' found %{count} resources"
invalidManifestVersion = "Manifest '%{path}' does not use semver: %{err}"
importExtensionsEmpty = "Import extension '%{extension}' has no import extensions defined"
searchingForResources = "Searching for resources: %{resources}"
foundResourceWithVersion = "Found matching resource '%{resource}' version %{version}"
foundNonAdapterResources = "Found %{count} non-adapter resources"
resourceMissingRequireAdapter = "Resource '%{resource}' is missing 'require_adapter' field."
extensionDiscoverFailed = "Extension '%{extension}' failed to discover resources: %{error}"

[dscresources.commandResource]
invokeGet = "Invoking get for '%{resource}'"
invokeGetUsing = "Invoking get '%{resource}' using '%{executable}'"
verifyOutputUsing = "Verifying output of get '%{resource}' using '%{executable}'"
groupGetResponse = "Group get response: %{response}"
failedParseJson = "Failed to parse JSON from 'get': executable = '%{executable}' stdout = '%{stdout}' stderr = '%{stderr}' -> %{err}"
invokeSet = "Invoking set for '%{resource}'"
noPretest = "No pretest, invoking test on '%{resource}'"
syntheticWhatIf = "cannot process what-if execution type, as resource implements pre-test and does not support what-if"
setGetCurrent = "Getting current state for set by invoking get on '%{resource}' using '%{executable}'"
setVerifyGet = "Verifying output of get on '%{resource}' using '%{executable}'"
setVerifyOutput = "Verifying output of %{operation} '%{resource}' using '%{executable}'"
setUnexpectedOutput = "Command did not return expected actual output"
setUnexpectedDiff = "Command did not return expected diff output"
invokeTest = "Invoking test for '%{resource}'"
testSyntheticTest = "Resource '%{resource}' does not implement test, performing synthetic test"
invokeTestUsing = "Invoking test on '%{resource}' using '%{executable}'"
testVerifyOutput = "Verifying output of test on '%{resource}' using '%{executable}'"
testGroupTestResponse = "Import resource kind, returning group test response"
testNoActualState = "No actual state returned"
testNoDiff = "No diff properties returned"
invokeDeleteUsing = "Invoking delete on '%{resource}' using '%{executable}'"
invokeValidateConfig = "Invoking validate on '%{resource}' using '%{config}'"
invokeValidateUsing = "Invoking validate on '%{resource}' using '%{executable}'"
exportNotSupported = "Export is not supported by resource '%{resource}'"
exportVerifyOutput = "Verifying output of export on '%{resource}' using '%{executable}'"
resolveNotSupported = "Resolve is not supported by resource '%{resource}'"
invokeResolveUsing = "Invoking resolve on '%{resource}' using '%{executable}'"
processChildStdout = "child process did not have a handle to stdout"
processChildStderr = "child process did not have a handle to stderr"
processChildStdin = "child process did not have a handle to stdin"
processWriteStdin = "could not write to stdin"
processChildId = "Can't get child process id"
processChildExit = "Process '%{executable}' id %{id} exited with code %{code}"
processChildTerminated = "Process '%{executable}' id %{id} terminated by signal"
processTerminated = "Process terminated by signal"
commandInvoke = "Invoking command '%{executable}' with args %{args}"
commandCwd = "Current working directory: %{cwd}"
noArgs = "No args to process"
parseAsEnvVars = "Parsing input as environment variables"
parseAsStdin = "Parsing input as stdin"
noInput = "No input kind specified"
verifyJson = "Verify JSON for '%{resource}'"
validateJson = "Validating against JSON: %{json}"
resourceInvalidJson = "Resource reported input JSON is not valid"
invalidArrayKey = "Unsupported array value for key '%{key}'.  Only string and number is supported."
invalidKey = "Unsupported value for key '%{key}'.  Only string, bool, number, and array is supported."
inDesiredStateNotBool = "'_inDesiredState' is not a boolean"
exportNotSupportedUsingGet = "Export is not supported by resource '%{resource}' using get operation"
runProcessError = "Failed to run process '%{executable}': %{error}"

[dscresources.dscresource]
invokeGet = "Invoking get for '%{resource}'"
customResourceNotSupported = "Custom resource not supported"
invokeSet = "Invoking set for '%{resource}'"
invokeTest = "Invoking test for '%{resource}'"
invokeDelete = "Invoking delete for '%{resource}'"
invokeValidate = "Invoking validate for '%{resource}'"
invokeValidateNotSupported = "Invoking validate is not supported for adapted resource '%{resource}'"
invokeSchema = "Invoking schema for '%{resource}'"
invokeSchemaNotSupported = "Invoking schema is not supported for adapted resource '%{resource}'"
invokeExport = "Invoking export for '%{resource}'"
invokeExportReturnedNoResult = "Invoking export returned no result for '%{resource}'"
invokeResolve = "Invoking resolve for '%{resource}'"
invokeResolveNotSupported = "Invoking resolve is not supported for adapted resource '%{resource}'"
invokeReturnedWrongResult = "Invoking '%{operation}' on '%{resource}' returned unexpected result"
propertyIncorrectType = "Property '%{property}' is not of type '%{property_type}'"
propertyNotFound = "Property '%{property}' not found"
subDiff = "diff: sub diff for '%{key}'"
diffArray = "diff: arrays differ for '%{key}'"
diffNotArray = "diff: '%{key}' is not an array"
diffKeyMissing = "diff: key '%{key}' missing"
diffKeyNotObject = "diff: key '%{key}' is not an object"
diffArraySize = "diff: arrays have different lengths"
diffMissingItem = "diff: actual array missing expected item"
failedToCompileSchema = "JSON Schema Compilation"
noManifest = "Resource does not have a manifest"
noReason = "No reason provided"
noSchemaOrValidate = "Resource does not have a schema nor supports validation"
resourceDoesNotImplementValidate = "Resource does not implement validation, using schema"
resourceImplementsValidate = "Resource implements validation"
resourceValidationFailed = "Resource failed validation"
validatingSchema = "Validating against schema"
validationFailed = "Failed validation"
adapterResourceNotFound = "Adapter resource '%{adapter}' not found"
adapterManifestNotFound = "Adapter manifest for '%{adapter}' not found"
adapterDoesNotSupportDelete = "Adapter '%{adapter}' does not support delete operation"

[dscresources.resource_manifest]
resourceManifestSchemaTitle = "Resource manifest schema URI"
resourceManifestSchemaDescription = "Defines the JSON Schema the resource manifest adheres to."

[extensions.dscextension]
discoverNoResults = "No results returned for discovery extension '%{extension}'"
discoverNotAbsolutePath = "Resource path from extension '%{extension}' is not an absolute path: %{path}"
extensionReturned = "Extension '%{extension}' returned line: %{line}"
retrievingSecretFromExtension = "Retrieving secret '%{name}' from extension '%{extension}'"
extensionReturnedSecret = "Extension '%{extension}' returned secret"
extensionReturnedNoSecret = "Extension '%{extension}' did not return a secret"
importingFile = "Importing file '%{file}' with extension '%{extension}'"
importNotSupported = "Import is not supported by extension '%{extension}' for file '%{file}'"
importNoResults = "Extension '%{extension}' returned no results for import"
secretMultipleLinesReturned = "Extension '%{extension}' returned multiple lines which is not supported for secrets"

[extensions.extension_manifest]
extensionManifestSchemaTitle = "Extension manifest schema URI"
extensionManifestSchemaDescription = "Defines the JSON Schema the extension manifest adheres to."

[functions]
invalidArgType = "Invalid argument type"
invalidArguments = "Invalid argument(s)"
typeMismatch = "Arguments must be of the same type (both numbers or both strings)"
unknownFunction = "Unknown function '%{name}'"
noArgsAccepted = "Function '%{name}' does not accept arguments"
invalidArgCount = "Function '%{name}' requires exactly %{count} arguments"
minArgsRequired = "Function '%{name}' requires at least %{count} arguments"
argCountRequired = "Function '%{name}' requires between %{min_args} and %{max_args} arguments"
noArrayArgs = "Function '%{name}' does not accept array arguments, accepted types are: %{accepted_args_string}"
noBooleanArgs = "Function '%{name}' does not accept boolean arguments, accepted types are: %{accepted_args_string}"
noNumberArgs = "Function '%{name}' does not accept number arguments, accepted types are: %{accepted_args_string}"
noNullArgs = "Function '%{name}' does not accept null arguments, accepted types are: %{accepted_args_string}"
noObjectArgs = "Function '%{name}' does not accept object arguments, accepted types are: %{accepted_args_string}"
noStringArgs = "Function '%{name}' does not accept string arguments, accepted types are: %{accepted_args_string}"

[functions.add]
description = "Adds two or more numbers together"
invoked = "add function"

[functions.and]
description = "Evaluates if all arguments are true"
invoked = "and function"

[functions.array]
description = "Convert the value to an array"
invoked = "array function"

[functions.base64]
description = "Encodes a string to Base64 format"

[functions.base64ToString]
description = "Converts a base64 representation to a string"
invoked = "base64ToString function"
invalidBase64 = "Invalid base64 encoding"
invalidUtf8 = "Decoded bytes do not form valid UTF-8"

[functions.bool]
description = "Converts a string or number to a boolean"
invoked = "bool function"

[functions.coalesce]
description = "Returns the first non-null value from a list of arguments"
invoked = "coalesce function"

[functions.concat]
description = "Concatenates two or more strings or arrays"
invoked = "concat function"
argsMustBeStrings = "Arguments must all be strings"
argsMustBeArrays = "Arguments must all be arrays"
onlyArraysOfStrings = "Arguments must all be arrays of strings"

[functions.contains]
description = "Checks if an array contains a specific item"
invoked = "contains function"
invalidItemToFind = "Invalid item to find, must be a string or number"
invalidArgType = "Invalid argument type, first argument must be an array, object, or string"

[functions.context]
description = "Retrieves context information about the current execution environment"
invoked = "context function"

[functions.copyIndex]
description = "Returns the current copy index"
invoked = "copyIndex function"
cannotUseOutsideCopy = "The 'copyIndex()' function can only be used when processing a 'Copy' loop"
loopNameNotFound = "The specified loop name '%{name}' was not found"
noCurrentLoop = "There is no current loop to get the index from"
offsetNegative = "The offset cannot be negative"

[functions.createArray]
description = "Creates an array from the given elements"
invoked = "createArray function"
argsMustAllBeArrays = "Arguments must all be arrays"
argsMustAllBeIntegers = "Arguments must all be integers"
argsMustAllBeObjects = "Arguments must all be objects"
argsMustAllBeStrings = "Arguments must all be strings"

[functions.createObject]
description = "Creates an object from the given key-value pairs"
invoked = "createObject function"
argsMustBePairs = "Arguments must be provided in key-value pairs"
keyMustBeString = "Object keys must be strings"

[functions.div]
description = "Divides the first number by the second"
invoked = "div function"
divideByZero = "Cannot divide by zero"

[functions.empty]
description = "Checks if an array, object, or string is empty"
invoked = "empty function"
invalidArgType = "Invalid argument type, argument must be an array, object, or string"

[functions.endsWith]
description = "Checks if a string ends with a specific suffix"
invoked = "endsWith function"

[functions.envvar]
description = "Retrieves the value of an environment variable"
notFound = "Environment variable not found"

[functions.equals]
description = "Evaluates if the two values are the same"

[functions.false]
description = "Returns the boolean value false"
invoked = "false function"

[functions.first]
description = "Returns the first element of an array or first character of a string"
invoked = "first function"
emptyArray = "Cannot get first element of empty array"
emptyString = "Cannot get first character of empty string"
invalidArgType = "Invalid argument type, argument must be an array or string"

[functions.last]
description = "Returns the last element of an array or last character of a string"
invoked = "last function"
invalidArgType = "Invalid argument type, argument must be an array or string"

[functions.greater]
description = "Evaluates if the first value is greater than the second value"
invoked = "greater function"

[functions.greaterOrEquals]
description = "Evaluates if the first value is greater than or equal to the second value"
invoked = "greaterOrEquals function"

[functions.format]
description = "Formats a string using the given arguments"
experimental = "`format()` function is experimental"
formatInvalid = "First `format()` argument must be a string"
numberTooLarge = "Number is too large"
invalidArgType = "Unsupported argument type"
invalidFormatString = "Invalid format string"

[functions.if]
description = "Evaluates a condition and returns second value if true, otherwise returns third value"
conditionNotBoolean = "Condition is not a boolean"

[functions.int]
description = "Converts a string or number to an integer"
invalidInput = "invalid input string"
parseStringError = "unable to parse string to int"
castError = "unable to cast to int"
parseNumError = "unable to parse number to int"

[functions.intersection]
description = "Returns a single array or object with the common elements from the parameters"
invoked = "intersection function"
invalidArgType = "All arguments must either be arrays or objects"

[functions.items]
description = "Converts a dictionary object to an array of objects with key and value properties"
notObject = "Argument must be an object"

[functions.indexOf]
description = "Returns the index of the first occurrence of an item in an array"
invoked = "indexOf function"
invalidArrayArg = "First argument must be an array"

[functions.join]
description = "Joins the elements of an array into a single string, separated using a delimiter."
invoked = "join function"
invalidArrayArg = "First argument must be an array"
invalidNullElement = "Array elements cannot be null"
invalidArrayElement = "Array elements cannot be arrays"
invalidObjectElement = "Array elements cannot be objects"

[functions.json]
description = "Converts a valid JSON string into a JSON data type"
invalidJson = "Invalid JSON string"

[functions.lastIndexOf]
description = "Returns the index of the last occurrence of an item in an array"
invoked = "lastIndexOf function"
invalidArrayArg = "First argument must be an array"

[functions.length]
description = "Returns the length of a string, array, or object"
invoked = "length function"
invalidArgType = "Invalid argument type, argument must be a string, array, or object"

[functions.less]
description = "Evaluates if the first value is less than the second value"
invoked = "less function"

[functions.lessOrEquals]
description = "Evaluates if the first value is less than or equal to the second value"
invoked = "lessOrEquals function"

[functions.max]
description = "Returns the largest number from a list of numbers"
emptyArray = "Array cannot be empty"
integersOnly = "Array must contain only integers"
noMax = "Unable to find max value"

[functions.min]
description = "Returns the smallest number from a list of numbers"
invoked = "min function"
emptyArray = "Array cannot be empty"
integersOnly = "Input must only contain integers"
noMin = "Unable to find min value"

[functions.mod]
description = "Divides the first number by the second and returns the remainder"
divideByZero = "Cannot divide by zero"

[functions.mul]
description = "Multiplies two or more numbers together"
invoked = "mul function"

[functions.not]
description = "Negates a boolean value"
invoked = "not function"

[functions.null]
description = "Returns a null value"
invoked = "null function"

[functions.or]
description = "Evaluates if any arguments are true"
invoked = "or function"

[functions.parameters]
description = "Retrieves parameters from the configuration"
invoked = "parameters function"
traceKey = "parameters key: %{key}"
keyNotString = "Parameter '%{key}' is not a string"
keyNotInt = "Parameter '%{key}' is not an integer"
keyNotBool = "Parameter '%{key}' is not a boolean"
keyNotObject = "Parameter '%{key}' is not an object"
keyNotArray = "Parameter '%{key}' is not an array"
keyNotFound = "Parameter '%{key}' not found in context"

[functions.path]
description = "Concatenates multiple strings into a file path"
traceArgs = "Executing path function with args: %{args}"
argsMustBeStrings = "Arguments must all be strings"

[functions.range]
description = "Creates an array of integers from a starting integer and containing a number of items"
invoked = "range function"
startIndexNotInt = "Start index must be an integer"
countNotInt = "Count must be an integer"
countNegative = "Count must be non-negative"
countTooLarge = "Count must not exceed 10000"
sumTooLarge = "Sum of startIndex and count must not exceed 2147483647"
sumOverflow = "Sum of startIndex and count causes overflow"

[functions.reference]
description = "Retrieves the output of a previously executed resource"
invoked = "reference function"
keyNotFound = "Invalid resourceId or resource has not executed yet: %{key}"
cannotUseInCopyMode = "The 'reference()' function cannot be used when processing a 'Copy' loop"
unavailableInUserFunction = "The 'reference()' function is not available in user-defined functions"

[functions.resourceId]
description = "Constructs a resource ID from the given type and name"
incorrectTypeFormat = "Type argument must contain exactly one slash"

[functions.secret]
description = "Retrieves a secret from a vault"
notString = "Parameter secret name is not a string"
multipleSecrets = "Multiple secrets with the same name '%{name}' and different values was returned, try specifying a vault"
extensionReturnedError = "Extension '%{extension}': %{error}"
noExtensions = "No extensions supporting secrets was found"
secretNotFound = "Secret '%{name}' not found"

[functions.startsWith]
description = "Checks if a string starts with a specific prefix"
invoked = "startsWith function"

[functions.skip]
description = "Returns an array with all elements after the specified number, or a string with all characters after the specified number"
invoked = "skip function"
invalidNumberToSkip = "Second argument must be an integer"
invalidOriginalValue = "First argument must be an array or string"

[functions.string]
description = "Converts a value to a string"

[functions.substring]
description = "Returns a substring that starts at the specified character position and contains the specified number of characters"
invoked = "substring function"
startIndexNegative = "Start index cannot be negative"
startIndexTooLarge = "Start index is beyond the end of the string"
startIndexValueTooLarge = "Start index value too large"
lengthNegative = "Length cannot be negative"
lengthTooLarge = "Length extends beyond the end of the string"
lengthValueTooLarge = "Length value too large"

[functions.sub]
description = "Subtracts the second number from the first"
invoked = "sub function"

[functions.systemRoot]
description = "Returns the system root path"
invoked = "systemRoot function"

[functions.take]
description = "Returns an array with the specified number of elements from the start, or a string with the specified number of characters from the start"
invoked = "take function"
invalidNumberToTake = "Second argument must be an integer"
invalidOriginalValue = "First argument must be an array or string"

[functions.toLower]
description = "Converts the specified string to lower case"

[functions.toUpper]
description = "Converts the specified string to upper case"

[functions.trim]
description = "Removes all leading and trailing white-space characters from the specified string"

[functions.true]
description = "Returns the boolean value true"
invoked = "true function"

[functions.tryGet]
description = "Attempts to retrieve a value from an array (by index) or object (by key).  Null is returned if the key or index does not exist."
invoked = "tryGet function"
invalidKeyType = "Invalid key type, must be a string"
invalidIndexType = "Invalid index type, must be an integer"

[functions.tryIndexFromEnd]
description = "Retrieves a value from an array by counting backward from the end. Returns null if the index is out of range."
invoked = "tryIndexFromEnd function"
invalidSourceType = "Invalid source type, must be an array"
invalidIndexType = "Invalid index type, must be an integer"

[functions.union]
description = "Returns a single array or object with all elements from the parameters"
invoked = "union function"
invalidArgType = "All arguments must either be arrays or objects"

[functions.uniqueString]
description = "Returns a deterministic unique string from the given strings"
invoked = "uniqueString function"

[functions.uri]
description = "Creates an absolute URI by combining the baseUri and the relativeUri string"
emptyBaseUri = "The baseUri parameter cannot be empty. An absolute URI requires a valid base URI."
notAbsoluteUri = "The baseUri must be an absolute URI (must include a scheme such as https:// or file://)."
invalidRelativeUri = "Invalid URI: The relative URI contains an invalid sequence. Three or more consecutive slashes (///) are not allowed."

[functions.uriComponent]
description = "Encodes a URI component using percent-encoding"

[functions.uriComponentToString]
description = "Returns a string of a URI encoded value"
invalidUtf8 = "Invalid UTF-8 in decoded string: %{error}"

[functions.userFunction]
expectedNoParameters = "User function '%{name}' does not accept parameters"
unknownUserFunction = "Unknown user function '%{name}'"
wrongParamCount = "User function '%{name}' expects %{expected} parameters, but %{got} were provided"
incorrectOutputType = "Output of user function '%{name}' did not return expected type '%{expected_type}'"

[functions.utcNow]
description = "Returns the current UTC time"
invoked = "utcNow function"
onlyUsedAsParameterDefault = "The 'utcNow()' function can only be used as a parameter default"

[functions.variables]
description = "Retrieves the value of a variable"
invoked = "variables function"
keyNotFound = "Variable '%{key}' does not exist or has not been initialized yet"
unavailableInUserFunction = "The 'variables()' function is not available in user-defined functions"

[parser.expression]
functionNodeNotFound = "Function node not found"
parsingFunction = "Parsing function: %{name}"
parsingAccessor = "Parsing accessor: %{name}"
accessorParsingError = "Error parsing accessor"
parsingMemberAccessor = "Parsing member accessor: %{name}"
memberNotFound = "Member name not found"
parsingIndexAccessor = "Parsing index accessor: %{index}"
indexNotFound = "Index value not found"
indexValue = "Index value: %{value} with kind %{kind}"
propertyNameValue = "Property name value: %{value}"
invalidIndexValueKind = "Invalid index value kind: %{kind}"
invalidAccessorKind = "Invalid accessor kind: %{kind}"
functionResult = "Function results: %{results}"
functionResultSecure = "Function result is secure"
evalAccessors = "Evaluating accessors"
memberNameNotFound = "Member '%{member}' not found"
accessOnNonObject = "Member access on non-object value"
expressionResult = "Expression result: %{result}"
indexNotValid = "Index is not a valid number"
indexOutOfBounds = "Index is out of bounds"
indexOnNonArray = "Index access on non-array value"
invalidIndexType = "Invalid index type"
propertyNameNotString = "Property name is not a string"

[parser.functions]
foundErrorNode = "Found error node parsing function"
nameNodeNotFound = "Function name node not found"
functionName = "Function name: '%{name}'"
argIsExpression = "Argument is an expression"
argIsValue = "Argument is a value: '%{value}'"
unknownArgType = "Unknown argument type '%{kind}'"

[parser]
parsingStatement = "Parsing statement: %{statement}"
failedToParse = "Unable to parse: %{statement}"
failedToParseRoot = "Unable to parse statement root: %{statement}"
invalidStatement = "Invalid statement: %{statement}"
failedToParseStringLiteral = "Unable to parse string literal"
parsingStringLiteral = "Parsing string literal: %{value}"
failedToParseEscapedStringLiteral = "Unable to parse escaped string literal"
parsingEscapedStringLiteral = "Parsing escaped string literal: %{value}"
parsingExpression = "Parsing expression"
unknownExpressionType = "Unknown expression type: %{kind}"
skippingExpressionProcessing = "Skipping expression processing"

[dscerror]
adapterNotFound = "Adapter not found"
booleanConversion = "Function boolean argument conversion"
exitCode = "exit code"
commandResource = "Command: Resource"
commandExecutable = "Command: Executable"
manifestDescription = "manifest description"
commandOperation = "Command: Operation"
forExecutable = "for executable"
function = "Function"
integerConversion = "Function integer argument conversion"
invalidConfiguration = "Invalid configuration"
unsupportedManifestVersion = "Unsupported manifest version"
mustBe = "Must be"
invalidFunctionParameterCount = "Invalid function parameter count for"
expected = "expected"
got = "got"
language = "Language"
manifest = "Manifest"
missingManifest = "Missing manifest"
adapterBasedResource = "Adapter based resource"
missingRequires = "missing 'requires' property for resource"
schemaMissing = "Schema missing from manifest"
notImplemented = "Not implemented"
notSupported = "Not supported"
numberConversion = "Number conversion"
operation = "Operation"
parser = "Parser"
progress = "Progress"
resourceNotFound = "Resource not found"
resourceManifestNotFound = "Resource manifest not found"
schema = "Schema"
schemaNotAvailable = "No Schema found and `validate` is not supported"
securityContext = "Security context"
utf8Conversion = "UTF-8 conversion"
unknown = "Unknown"
unrecognizedSchemaUri = "Unrecognized $schema URI"
validation = "Validation"
validSchemaUrisAre = "Valid schema URIs are"
extension = "Extension"
unsupportedCapability = "does not support capability"
setting = "Setting"
invalidRequiredVersion = "Invalid required version '%{version}' for resource '%{resource}'"

[progress]
failedToSerialize = "Failed to serialize progress JSON: %{json}"

[util]
foundSetting = "Found setting '%{name}' in %{path}"
notFoundSetting = "Setting '%{name}' not found in %{path}"
failedToGetExePath = "Can't get 'dsc' executable path"
settingNotFound = "Setting '%{name}' not found"
failedToAbsolutizePath = "Failed to absolutize path '%{path}'"
invalidExitCodeKey = "Invalid exit code key '%{key}'"
