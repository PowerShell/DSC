name: DSC-Release-$(Build.BuildId)
trigger: none

pr:
  branches:
    include:
    - onebranch
    - release/v*

schedules:
- cron: '0 3 * * 1'
  displayName: Weekly Build
  branches:
    include:
    - main
  always: true

variables:
  BuildConfiguration: 'release'
  PackageRoot: '$(System.ArtifactsDirectory)/Packages'
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2022/vse2022:latest'
  Codeql.TSAEnabled: true

resources:
  repositories:
  - repository: onebranchTemplates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@onebranchTemplates
  parameters:
    featureFlags:
      WindowsHostVersion:
        Disk: Large
        Version: 2022
        Network: KS1 # note that this property is sticky so commenting out will use the previous set one
# Currently can't be used as some NPM pkgs like tree-sitter-cli reach out to GitHub to get the actual zip pkg
#        Network: NetLock
    customTags: 'ES365AIMigrationTooling'
    globalSdl:
      disableLegacyManifest: true
      sbom:
        enabled: true
        packageName: Microsoft.DSC
      codeql:
        compiled:
          enabled: true
      asyncSdl: # https://aka.ms/obpipelines/asyncsdl
        enabled: true
        forStages: [Build]
        credscan:
          enabled: true
          scanFolder:  $(Build.SourcesDirectory)\DSC
        binskim:
          enabled: true
        apiscan:
          enabled: false

    stages:
    - stage: BuildAndSign
      displayName: Build Native Binaries
      dependsOn: []
      jobs:
      - job: SetPackageVersion
        displayName: Set PackageVersion
        pool:
          type: windows
          vmImage: windows-latest
        variables:
          repoRoot: $(Build.SourcesDirectory)\DSC
          ob_sdl_tsa_configFile: $(Build.SourcesDirectory)\DSC\.config\tsaoptions.json
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
          ob_sdl_sbom_enabled: false
          ob_signing_setup_enabled: false
          ob_sdl_codeql_compiled_enabled: false
        steps:
        - checkout: self
        - pwsh: |
            $packageVersion = $(repoRoot)/build.ps1 -GetPackageVersion
            $vstsCommandString = "vso[task.setvariable variable=Version;isoutput=true]$packageVersion"
            Write-Host ("sending " + $vstsCommandString)
            Write-Host "##$vstsCommandString"
          name: Package

      - job: BuildWin_x64
        dependsOn: SetPackageVersion
        steps:
        - template: .pipelines/DSC-Windows.yml
          parameters:
            buildName: x86_64-pc-windows-msvc

      - job: BuildWin_arm64
        dependsOn: SetPackageVersion
        steps:
        - template: .pipelines/DSC-Windows.yml
          parameters:
            buildName: aarch64-pc-windows-msvc

      - job: CreateMsixBundle
        dependsOn:
          - BuildWin_x64
          - BuildWin_arm64
        variables:
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
          ob_sdl_tsa_configFile: '$(Build.SourcesDirectory)\DSC\.config\tsaoptions.json'
          ob_sdl_sbom_enabled: true
          ob_signing_setup_enabled: true
          ob_sdl_codeql_compiled_enabled: true
        pool:
          type: windows
        steps:
        - checkout: self
        - download: current
          artifact: drop_BuildAndSign_BuildWin_x64
          patterns: '*.msix'
        - download: current
          artifact: drop_BuildAndSign_BuildWin_arm64
          patterns: '*.msix'
        - pwsh: |
            Set-Location "$(Build.SourcesDirectory)/DSC"
            $null = New-Item -ItemType Directory -Path "./bin/msix" -Force -ErrorAction Ignore
            Copy-Item "$(Pipeline.Workspace)/drop_BuildAndSign_BuildWin_x64/*.msix" ./bin/msix -Verbose
            Copy-Item "$(Pipeline.Workspace)/drop_BuildAndSign_BuildWin_arm64/*.msix" ./bin/msix -Verbose
            ./build.ps1 -PackageType msixbundle
            Copy-Item ./bin/*.msixbundle "$(ob_outputDirectory)"
          displayName: 'Create msixbundle'
          condition: succeeded()

      - job: BuildLinuxMusl
        dependsOn: SetPackageVersion
        variables:
          LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2204:latest'
          PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
        displayName: Linux-x64-musl
        pool:
          type: linux
        steps:
        - task: RustInstaller@1
          inputs:
            rustVersion: ms-stable
            toolchainFeed: https://pkgs.dev.azure.com/mscodehub/Rust/_packaging/Rust/nuget/v3/index.json
            additionalTargets: x86_64-unknown-linux-musl
          displayName: Install Rust
          env:
            ob_restore_phase: true
        - pwsh: |
            apt update
            apt -y install musl-tools
            ./build.ps1 -Release -Architecture x86_64-unknown-linux-musl
            ./build.ps1 -PackageType tgz -Architecture x86_64-unknown-linux-musl -Release
            Copy-Item ./bin/*.tar.gz "$(ob_outputDirectory)"
          displayName: 'Build x86_64-unknown-linux-musl'
          condition: succeeded()

      - job: BuildLinuxArm64Musl
        dependsOn: SetPackageVersion
        variables:
          LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2004-arm64:latest'
          PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
        displayName: Linux-ARM64-musl
        pool:
          type: linux
          hostArchitecture: arm64
        steps:
        - task: RustInstaller@1
          inputs:
            rustVersion: ms-stable
            toolchainFeed: https://pkgs.dev.azure.com/mscodehub/Rust/_packaging/Rust/nuget/v3/index.json
            additionalTargets: aarch64-unknown-linux-musl
          displayName: Install Rust
          env:
            ob_restore_phase: true
        - pwsh: |
            $env:CC_aarch64_unknown_linux_musl='clang'
            $env:AR_aarch64_unknown_linux_musl='llvm-ar'
            $env:CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS="-Clink-self-contained=yes -Clinker=rust-lld"
            apt update
            apt -y install clang
            apt -y install llvm
            apt -y install musl-tools
            apt -y install gcc-multilib
            apt -y install libssl-dev
            apt -y install pkg-config
            rustup default stable-aarch64-unknown-linux-musl
            if ((openssl version -d) -match 'OPENSSLDIR: "(?<dir>.*?)"') {
              $env:OPENSSL_LIB_DIR = $matches['dir']
            }
            ./build.ps1 -Release -Architecture aarch64-unknown-linux-musl
            ./build.ps1 -PackageType tgz -Architecture aarch64-unknown-linux-musl -Release
            Copy-Item ./bin/*.tar.gz "$(ob_outputDirectory)"
          displayName: 'Build aarch64-unknown-linux-musl'
          condition: succeeded()

      - job: BuildMac
        dependsOn: SetPackageVersion
        variables:
          PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
        displayName: BuildMac
        pool:
          type: linux
          isCustom: true
          name: Azure Pipelines
          vmImage: 'macOS-latest'
        strategy:
          matrix:
            macOS x64:
              buildName: x86_64-apple-darwin
            macOS arm64:
              buildName: aarch64-apple-darwin
        steps:
        - task: RustInstaller@1
          inputs:
            rustVersion: ms-stable
            toolchainFeed: https://pkgs.dev.azure.com/mscodehub/Rust/_packaging/Rust/nuget/v3/index.json
            additionalTargets: $(buildName)
          displayName: Install Rust
          env:
            ob_restore_phase: true
        - pwsh: |
            ./build.ps1 -Release -Architecture $(buildName)
            ./build.ps1 -PackageType tgz -Architecture $(buildName) -Release
            Copy-Item ./bin/*.tar.gz "$(ob_outputDirectory)"
            Write-Host "##vso[artifact.upload containerfolder=release;artifactname=release]$(ob_outputDirectory)/DSC-$(PackageVersion)-$(buildName).tar.gz"
          displayName: 'Build $(buildName)'
          condition: succeeded()

    - stage: Release
      dependsOn: BuildAndSign
      condition: ne(variables['Build.Reason'], 'Schedule')
      variables:
        PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
      jobs:
      - job: Validation
        displayName: Manual validation
        pool:
          type: agentless
        timeoutInMinutes: 1440
        steps:
        - task: ManualValidation@0
          displayName: Wait 24 hours for validation
          inputs:
            notifyUsers: $(Build.RequestedForEmail)
            instructions: Please validate the release
            timeoutInMinutes: 1440
      - job: GitHub
        dependsOn: validation
        displayName: Publish draft to GitHub
        pool:
          type: windows
        variables:
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
          ob_sdl_sbom_enabled: false
          ob_signing_setup_enabled: false
          ob_sdl_codeql_compiled_enabled: false
          drop: $(Pipeline.Workspace)/drop_build_main
        steps:
        - download: current
          displayName: Download artifacts
          patterns: |
            '**/*.zip'
            '**/*.tar.gz'
        - task: GitHubRelease@1
          displayName: Create GitHub release
          inputs:
            gitHubConnection: GitHub
            repositoryName: PowerShell/DSC
            action: create
            assets: |
              *.zip;
              *.tar.gz;
            addChangeLog: true
            changeLogType: commitBased
            releaseNotesFilePath: CHANGELOG.md
            tagSource: gitTag
            tag: v$(version)
            isDraft: true
