{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/10/config/document.json",
  "title": "DSC Configuration Document schema",
  "description": "Describes a valid DSC Configuration Document.",
  "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDescribes a valid DSC Configuration Document.\n\nDSC Configurations enable users to define state by combining different DSC Resources. A\nconfiguration document uses parameters and variables to pass to a set of one or more resources\nthat define a desired state.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/document?view=dsc-3.0&preserve-view=true\n",
  "type": "object",
  "required": [
    "$schema",
    "resources"
  ],
  "properties": {
    "$schema": {
      "title": "Schema",
      "description": "This property must be the canonical URL of the DSC Configuration Document schema that the document is implemented for.",
      "type": "string",
      "format": "uri",
      "enum": [
        "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/10/config/document.json",
        "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/10/bundled/config/document.json",
        "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/10/bundled/config/document.vscode.json",
        "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/08/config/document.json",
        "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/08/bundled/config/document.json",
        "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/08/bundled/config/document.vscode.json"
      ],
      "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nThis property must be the canonical URL of the DSC Configuration Document schema that the\ndocument is implemented for.\n\nFor every version of the schema, there are three valid urls:\n\n```yaml\n.../config/document.json\n```\n\n> The URL to the canonical non-bundled schema. When it's used for validation, the validating\n> client needs to retrieve this schema and every schema it references.\n  \n```yaml\n.../bundled/config/document.json\n```\n\n> The URL to the bundled schema. When it's used for validation, the validating client only\n> needs to retrieve this schema.\n>\n> This schema uses the bundling model introduced for JSON Schema 2020-12. While DSC can\n> still validate the document when it uses this schema, other tools may error or behave\n> in unexpected ways.\n\n```yaml\n.../bundled/config/document.vscode.json\n```\n\n> The URL to the enhanced authoring schema. This schema is much larger than the other\n> schemas, as it includes additional definitions that provide contextual help and snippets\n> that the others don't include.\n>\n> This schema uses keywords that are only recognized by VS Code. While DSC can still\n> validate the document when it uses this schema, other tools may error or behave in\n> unexpected ways.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/document?view=dsc-3.0&preserve-view=true#schema\n",
      "markdownEnumDescriptions": [
        "<!-- force a line break -->\n\n> #### `2023/10` non-bundled\n>\n> Indicates that the configuration document adheres to the `2023/10` schema. This URL\n> points to the canonical non-bundled schema. When it's used for validation, the\n> validating client needs to retrieve this schema and every schema it references.\n",
        "<!-- force a line break -->\n\n> #### `2023/10` bundled\n>\n> Indicates that the configuration document adheres to the `2023/10` schema. This URL\n> points to the bundled schema. When it's used for validation, the validating client\n> only needs to retrieve this schema.\n>\n> This schema uses the bundling model introduced for JSON Schema 2020-12. While DSC can\n> still validate the document when it uses this schema, other tools may error or behave\n> in unexpected ways.\n",
        "<!-- force a line break -->\n\n> #### `2023/10` enhanced authoring\n>\n> Indicates that the configuration document adheres to the `2023/10` schema. This URL\n> points to the enhanced authoring schema. This schema is much larger than the other\n> schemas, as it includes additional definitions that provide contextual help and\n> snippets that the others don't include.\n>\n> This schema uses keywords that are only recognized by VS Code. While DSC can still\n> validate the document when it uses this schema, other tools may error or behave in\n> unexpected ways.\n",
        "<!-- force a line break -->\n\n> #### `2023/08` non-bundled\n>\n> Indicates that the configuration document adheres to the `2023/08` schema. This version\n> is deprecated, and should only be used for compatibility with `alpha.3` and earlier.\n> Migrate to using the `2023/10` of the schema \n>\n> This URL points to the canonical non-bundled schema. When it's used for validation, the\n> validating client needs to retrieve this schema and every schema it references.\n",
        "<!-- force a line break -->\n\n> #### `2023/08` bundled\n>\n> Indicates that the configuration document adheres to the `2023/08` schema. This URL\n> points to the bundled schema. When it's used for validation, the validating client\n> only needs to retrieve this schema.\n>\n> This schema uses the bundling model introduced for JSON Schema 2020-12. While DSC can\n> still validate the document when it uses this schema, other tools may error or behave\n> in unexpected ways.\n",
        "<!-- force a line break -->\n\n> #### `2023/08` enhanced authoring\n>\n> Indicates that the configuration document adheres to the `2023/08` schema. This URL\n> points to the enhanced authoring schema. This schema is much larger than the other\n> schemas, as it includes additional definitions that provide contextual help and\n> snippets that the others don't include.\n>\n> This schema uses keywords that are only recognized by VS Code. While DSC can still\n> validate the document when it uses this schema, other tools may error or behave in\n> unexpected ways.\n"
      ]
    },
    "parameters": {
      "title": "DSC Configuration document parameters",
      "description": "Defines runtime options for the configuration. Users and integrating tools can override use the defined parameters to pass alternate values to the configuration.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/PowerShell/DSC/main/schemas/2023/10/config/document.parameter.json"
      },
      "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines runtime options for the configuration. Users and integrating tools can override use\nthe defined parameters to pass alternate values to the configuration.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/document?view=dsc-3.0&preserve-view=true#parameters\n",
      "defaultSnippets": [
        {
          "label": " New Parameter",
          "markdownDescription": "Defines a new runtime option for the configuration.\n\n```yaml\nparameterId:\n  type:          <type>\n  description:   <description text>\n  defaultValue:  <value>\n  allowedValues:\n    - <first>\n```",
          "body": {
            "${1:parameterId}": {
              "type": "$2",
              "description": "$3",
              "defaultValue": "$4",
              "allowedValues": [
                "$5"
              ]
            }
          }
        },
        {
          "label": " New Integer Parameter",
          "markdownDescription": "Defines a new runtime option for the configuration as an integer value.\n\n```yaml\nparameterId:\n  type:          int\n  description:   <description text>\n  defaultValue:  <value>\n  minValue:      <minimum>\n  minValue:      <maximum>\n```",
          "body": {
            "${1:parameterId}": {
              "type": "int",
              "description": "$2",
              "defaultValue": "$3",
              "minValue": "$4",
              "maxValue": "$5"
            }
          }
        }
      ]
    },
    "variables": {
      "title": "Configuration variables",
      "description": "Defines a set of reusable values for the configuration document. The names of this value's properties are the strings used to reference a variable's value.",
      "type": "object",
      "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines a set of reusable values for the configuration document. The names of this value's\nproperties are the strings used to reference a variable's value.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/document?view=dsc-3.0&preserve-view=true#variables\n",
      "defaultSnippets": [
        {
          "label": " New variable property",
          "markdownDescription": "Defines a new variable as a key-value pair.\n\n```yaml\nvariableName: variableValue\n```",
          "body": {
            "${1:variableName}": "${2:variableValue}"
          }
        },
        {
          "label": " New variable property (object)",
          "markdownDescription": "Defines a new key-value pair for the variables where the value is an object.\n\n```yaml\nvariableName:\n  key: value\n```",
          "body": {
            "${1:variableName}": {
              "${2:key}": "${3:value}"
            }
          }
        },
        {
          "label": " New variable property (array)",
          "markdownDescription": "Defines a new key-value pair for the variables where the value is an array.\n\n```yaml\nvariableName:\n  - firstValue\n  - secondValue\n```",
          "body": {
            "${1:variableName}": [
              "${2:firstValue}",
              "${3:secondValue}"
            ]
          }
        }
      ]
    },
    "resources": {
      "title": "DSC Configuration document resources",
      "description": "Defines a list of DSC Resource instances for the configuration to manage.",
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/PowerShell/DSC/main/schemas/2023/10/config/document.resource.json"
      },
      "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines a list of DSC Resource instances for the configuration to manage.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/document?view=dsc-3.0&preserve-view=true#resources\n"
    },
    "metadata": {
      "title": "Configuration metadata",
      "description": "Defines a set of key-value pairs for the configuration. This metadata isn't validated.",
      "type": "object",
      "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines a set of key-value pairs for the configuration. This metadata isn't validated.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/document?view=dsc-3.0&preserve-view=true#metadata-1\n",
      "defaultSnippets": [
        {
          "label": " New metadata property",
          "markdownDescription": "Defines a key-value pair for the metadata:\n\n```yaml\nmetadataName: value\n```",
          "body": {
            "${1:metadataName}": "${2:value}"
          }
        },
        {
          "label": " New metadata property (object)",
          "markdownDescription": "Defines a new key-value pair for the metadata where the value is an object.\n\n```yaml\nmetadataName:\n  key: value\n```",
          "body": {
            "${1:metadataName}": {
              "${2:key}": "${3:value}"
            }
          }
        },
        {
          "label": " New metadata property (array)",
          "markdownDescription": "Defines a new key-value pair for the metadata where the value is an array.\n\n```yaml\nmetadataName:\n  - firstValue\n  - secondValue\n```",
          "body": {
            "${1:metadataName}": [
              "${2:firstValue}",
              "${3:secondValue}"
            ]
          }
        }
      ]
    }
  },
  "$defs": {
    "PowerShell": {
      "DSC": {
        "main": {
          "schemas": {
            "2023": {
              "10": {
                "config": {
                  "document.parameter.json": {
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "$id": "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/10/config/document.parameter.json",
                    "title": "Parameter",
                    "description": "Defines a runtime option for a DSC Configuration Document.",
                    "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines a runtime option for a DSC Configuration Document.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/parameter?view=dsc-3.0&preserve-view=true\n",
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "$ref": "#/$defs/PowerShell/DSC/main/schemas/2023/10/definitions/parameters/dataTypes.json"
                      },
                      "defaultValue": {
                        "title": "Default value",
                        "description": "Defines the default value for the parameter.",
                        "$ref": "#/$defs/PowerShell/DSC/main/schemas/2023/10/definitions/parameters/validValueTypes.json",
                        "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines the default value for the parameter.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/parameter?view=dsc-3.0&preserve-view=true#allowedvalues\n"
                      },
                      "allowedValues": {
                        "title": "Allowed values",
                        "description": "Defines a list of valid values for the parameter. If the parameter is defined with any other values, it's invalid.",
                        "type": "array",
                        "items": {
                          "$ref": "#/$defs/PowerShell/DSC/main/schemas/2023/10/definitions/parameters/validValueTypes.json"
                        },
                        "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines a list of valid values for the parameter. If the parameter is defined with any other\nvalues, it's invalid.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/parameter?view=dsc-3.0&preserve-view=true#allowedvalues\n"
                      },
                      "description": {
                        "title": "Parameter description",
                        "description": "Defines a synopsis for the parameter explaining its purpose.",
                        "type": "string",
                        "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines a synopsis for the parameter explaining its purpose.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/parameter?view=dsc-3.0&preserve-view=true#description-1\n"
                      },
                      "metadata": {
                        "title": "Parameter metadata",
                        "description": "Defines a set of key-value pairs for the parameter. This metadata isn't validated.",
                        "type": "object",
                        "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines a set of key-value pairs for the parameter. This metadata isn't validated.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/parameter?view=dsc-3.0&preserve-view=true#metadata-1\n",
                        "defaultSnippets": [
                          {
                            "label": " New metadata property",
                            "markdownDescription": "Defines a key-value pair for the metadata:\n\n```yaml\nmetadataName: value\n```",
                            "body": {
                              "${1:metadataName}": "${2:value}"
                            }
                          },
                          {
                            "label": " New metadata property (object)",
                            "markdownDescription": "Defines a new key-value pair for the metadata where the value is an object.\n\n```yaml\nmetadataName:\n  key: value\n```",
                            "body": {
                              "${1:metadataName}": {
                                "${2:key}": "${3:value}"
                              }
                            }
                          },
                          {
                            "label": " New metadata property (array)",
                            "markdownDescription": "Defines a new key-value pair for the metadata where the value is an array.\n\n```yaml\nmetadataName:\n  - firstValue\n  - secondValue\n```",
                            "body": {
                              "${1:metadataName}": [
                                "${2:firstValue}",
                                "${3:secondValue}"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    "allOf": [
                      {
                        "if": {
                          "properties": {
                            "type": {
                              "const": "int"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "minValue": {
                              "title": "Minimum value",
                              "description": "The minimum valid value for an integer type. If defined with the `maxValue` property, this value must be less than the value of `maxValue`.",
                              "type": "integer",
                              "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nThe minimum valid value for an integer type. If defined with the `maxValue` property,\nthis value must be less than the value of `maxValue`.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/parameter?view=dsc-3.0&preserve-view=true#minvalue\n"
                            },
                            "maxValue": {
                              "title": "Maximum value",
                              "description": "The maximum valid value for an integer type. If defined with the `minValue` property, this value must be greater than the value of `minValue`.",
                              "type": "integer",
                              "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nThe maximum valid value for an integer type. If defined with the `minValue` property,\nthis value must be greater than the value of `minValue`.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/parameter?view=dsc-3.0&preserve-view=true#maxvalue\n"
                            }
                          }
                        }
                      },
                      {
                        "if": {
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "const": "string"
                                }
                              }
                            },
                            {
                              "properties": {
                                "type": {
                                  "const": "securestring"
                                }
                              }
                            },
                            {
                              "properties": {
                                "type": {
                                  "const": "array"
                                }
                              }
                            }
                          ]
                        },
                        "then": {
                          "properties": {
                            "minLength": {
                              "title": "Minimum length",
                              "description": "The minimum valid length for a `string`, `securestring`, or `array`. If defined with the `maxLength` property, this value must be less than the value of `maxLength`.",
                              "type": "integer",
                              "minimum": 0,
                              "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nThe minimum valid length for a `string`, `securestring`, or `array`. If defined with\nthe `maxLength` property, this value must be less than the value of `maxLength`.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/parameter?view=dsc-3.0&preserve-view=true#minLength\n"
                            },
                            "maxLength": {
                              "title": "Maximum length",
                              "description": "The maximum valid length for a `string`, `securestring`, or `array`. If defined with the `minLength` property, this value must be less than the value of `minLength`.",
                              "type": "integer",
                              "minimum": 0,
                              "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nThe maximum valid length for a `string`, `securestring`, or `array`. If defined with\nthe `minLength` property, this value must be less than the value of `minLength`.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/parameter?view=dsc-3.0&preserve-view=true#maxLength\n"
                            }
                          }
                        }
                      },
                      {
                        "if": {
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "const": "string"
                                }
                              }
                            },
                            {
                              "properties": {
                                "type": {
                                  "const": "securestring"
                                }
                              }
                            }
                          ]
                        },
                        "then": {
                          "properties": {
                            "defaultValue": {
                              "type": "string"
                            },
                            "allowedValues": {
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      {
                        "if": {
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "const": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "type": {
                                  "const": "secureobject"
                                }
                              }
                            }
                          ]
                        },
                        "then": {
                          "properties": {
                            "defaultValue": {
                              "type": "object"
                            },
                            "allowedValues": {
                              "items": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      },
                      {
                        "if": {
                          "properties": {
                            "type": {
                              "const": "int"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "defaultValue": {
                              "type": "integer"
                            },
                            "allowedValues": {
                              "items": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      },
                      {
                        "if": {
                          "properties": {
                            "type": {
                              "const": "array"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "defaultValue": {
                              "type": "array"
                            }
                          }
                        }
                      },
                      {
                        "if": {
                          "properties": {
                            "type": {
                              "const": "bool"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "defaultValue": {
                              "type": "boolean"
                            },
                            "allowedValues": {
                              "items": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  "document.resource.json": {
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "$id": "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/10/config/document.resource.json",
                    "title": "DSC Resource instance",
                    "description": "Defines an instance of a DSC Resource in a configuration.",
                    "type": "object",
                    "required": [
                      "type",
                      "name"
                    ],
                    "properties": {
                      "type": {
                        "$ref": "#/$defs/PowerShell/DSC/main/schemas/2023/10/definitions/resourceType.json"
                      },
                      "name": {
                        "$ref": "#/$defs/PowerShell/DSC/main/schemas/2023/10/definitions/instanceName.json"
                      },
                      "dependsOn": {
                        "title": "Instance depends on",
                        "description": "Defines a list of DSC Resource instances that DSC must successfully process before processing this instance. Each value for this property must be the `resourceID()` lookup for another instance in the configuration. Multiple instances can depend on the same instance, but every dependency for an instance must be unique in that instance's `dependsOn` property.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "uniqueItems": true,
                          "pattern": "^\\[resourceId\\(\\s*'\\w+(\\.\\w+){0,2}\\/\\w+'\\s*,\\s*'[a-zA-Z0-9 ]+'\\s*\\)\\]$",
                          "patternErrorMessage": "Invalid value, must be a value like `[resourceId('<type>', '<name>`)], such as\n`[resourceId('Microsoft/OSInfo', 'Foo')]`.\n\nThe `<type>` and `<name>` should be the fully qualified type of the resource and its\nfriendly name in the configuration.\n",
                          "defaultSnippets": [
                            {
                              "label": " New dependency",
                              "markdownDescription": "Defines a new dependency for the resource instance.\n\n```yaml\n\"[resourceId('dependencyInstance/Type', 'dependencyInstanceName')]\"\n```",
                              "bodyText": "\"[resourceId('${3:dependencyInstance/Type}', '${4:dependencyInstanceName}')]\""
                            }
                          ]
                        },
                        "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines a list of DSC Resource instances that DSC must successfully process before processing\nthis instance. Each value for this property must be the `resourceID()` lookup for another\ninstance in the configuration. Multiple instances can depend on the same instance, but every\ndependency for an instance must be unique in that instance's `dependsOn` property.\n\nThe `resourceID()` function uses this syntax:\n\n```yaml\n\"[resourceId('<resource-type-name>', '']<instance-name>\"\n```\n\nThe `<resource-type-name>` value is the `type` property of the dependent resource and\n`<instance-name>` is the dependency's `name` property. When adding a dependency in a\nYAML-format configuration document, always wrap the `resourceID()` lookup in double quotes\n(`\"`).\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/resource?view=dsc-3.0&preserve-view=true#properties-1\n"
                      },
                      "properties": {
                        "title": "Managed instance properties",
                        "description": "Defines the properties of the DSC Resource this instance manages. This property's value must be an object. DSC validates the property's value against the DSC Resource's schema.",
                        "type": "object",
                        "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines the properties of the DSC Resource this instance manages. This property's value must\nbe an object. DSC validates the property's value against the DSC Resource's schema.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/resource?view=dsc-3.0&preserve-view=true#properties-1\n"
                      }
                    },
                    "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines an instance of a DSC Resource in a configuration.\n\nThe `resources` property of a DSC Configuration document always includes at least one DSC Resource\ninstance. Together, the instances in a configuration define the desired state that DSC can get,\ntest, and set on a machine.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/resource?view=dsc-3.0&preserve-view=true\n",
                    "defaultSnippets": [
                      {
                        "label": " New resource instance",
                        "markdownDescription": "Defines a new instance of a DSC Resource for the configuration.\n\n```yaml\ntype: owner[.group][.area]/name\nname: instance_name\nproperties:\n  propertyName: propertyValue\n```",
                        "body": {
                          "type": "${1:owner[.group][.area]/name}",
                          "name": "${2:instance_name}",
                          "properties": {
                            "${3:propertyName}": "${4:propertyValue}"
                          }
                        }
                      },
                      {
                        "label": " New dependent resource instance",
                        "markdownDescription": "Defines a new instance of a DSC Resource for the configuration that depends on another\ninstance.\n\n```yaml\ntype:      owner[.group][.area]/name\nname:      instance_name\ndependsOn:\n  - \"[resourceId('dependencyInstance/Type', 'dependencyInstanceName')]\"\nproperties:\n  propertyName: propertyValue\n```",
                        "body": {
                          "type": "${1:owner[.group][.area]/name}",
                          "name": "${2:instance_name}",
                          "dependsOn": [
                            "\"[resourceId('${3:dependencyInstance/Type}', '${4:dependencyInstanceName}')]\""
                          ],
                          "properties": {
                            "${5:propertyName}": "${6:propertyValue}"
                          }
                        }
                      }
                    ]
                  }
                },
                "definitions": {
                  "parameters": {
                    "dataTypes.json": {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "$id": "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/10/definitions/parameters/dataTypes.json",
                      "title": "Data Types",
                      "description": "Defines the data type for the parameter value.",
                      "type": "string",
                      "enum": [
                        "string",
                        "securestring",
                        "int",
                        "bool",
                        "object",
                        "secureobject",
                        "array"
                      ],
                      "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines the data type for the parameter value.\n\nThe valid data types for a parameter are:\n\n- `array` for arrays\n- `bool` for booleans\n- `int` for integers\n- `object` for objects\n- `string` for strings\n- `secureobject` for secure objects\n- `securestring` for secure strings\n\nAccess parameters in a configuration using this syntax:\n\n```yaml\n\"[parameter('<parameter-name>')]\"\n```\n\nIn YAML, the parameter syntax needs to be enclosed in double-quotes when used as an inline value.\nIf the syntax isn't quoted, YAML interprets the syntax as an array.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/definitions/parameters/datatypes?view=dsc-3.0&preserve-view=true\n",
                      "markdownEnumDescriptions": [
                        "_Strings are an arbitrary set of text._\n\n> To define a long strings in YAML, use the folded block syntax or literal block syntax by\n> adding a `>` or `|` and a line break after the key. Then, indent the next line. Every line\n> in the string must start at the same level of indentation. You can trim the trailing\n> whitespace by using `>-` or `|-` instead.\n>\n> For more information, see the [_Online Documentation_][01].\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/definitions/parameters/datatypes?view=dsc-3.0&preserve-view=true#strings\n",
                        "_Secure strings are text that needs to be handled securely._\n\n> Secure strings are an arbitrary set of text that DSC and integrating tools shouldn't log or\n> record. If a secure data type parameter is used for a resource instance property that doesn't\n> expect a secure value, the resource may still log or record the value. If the resource has\n> independent logging or recording that isn't handled by DSC, the value may be stored\n> insecurely.\n>\n> Use secure strings for passwords and secrets. Never define a default value for secure string\n> parameters.\n>\n> For more information, see the [_Online Documentation_][01].\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/definitions/parameters/datatypes?view=dsc-3.0&preserve-view=true#secure-strings-and-objects\n",
                        "_Integer values are numbers without a fractional part._\n\n> Integer values may be limited by integrating tools or the DSC Resources they're used with.\n> DSC itself supports integer values between `-9223372036854775808` and `9223372036854775807`.\n>\n> For more information, see the [_Online Documentation_][01].\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/definitions/parameters/datatypes?view=dsc-3.0&preserve-view=true#integers\n",
                        "_Boolean values are either `true` or `false`._\n\n> For more information, see the [_Online Documentation_][01].\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/definitions/parameters/datatypes?view=dsc-3.0&preserve-view=true#booleans\n",
                        "_Objects define a set of key-value pairs._\n\n> The value for each key can be any valid data type. The values can be the same type or\n> different types.\n>\n> Access keys in the object using dot-notation. Dot-notation uses this syntax:\n>\n> ```yaml\n> \"[parameters('<parameter-name>').<key-name>]\n> ```\n>\n> For more information, see the [_Online Documentation_][01].\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/definitions/parameters/datatypes?view=dsc-3.0&preserve-view=true#objects\n",
                        "_Secure objects are key-value pairs that need to be handled securely._\n\n> Secure objects define a set of key-value pairs that DSC and integrating tools shouldn't log\n> or record. If a secure data type parameter is used for a resource instance property that\n> doesn't expect a secure value, the resource may still log or record the value. If the\n> resource has independent logging or recording that isn't handled by DSC, the value may be\n> stored insecurely.\n>\n> Never define a default value for secure object parameters.\n>\n> For more information, see the [_Online Documentation_][01].\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/definitions/parameters/datatypes?view=dsc-3.0&preserve-view=true#secure-strings-and-objects\n",
                        "_Arrays are a list of one or more values._\n\n> The values in the array can be any valid data type. Values in the array can be the same type\n> or different types.\n>\n> For more information, see the [_Online Documentation_][01].\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/definitions/parameters/datatypes?view=dsc-3.0&preserve-view=true#arrays\n"
                      ]
                    },
                    "validValueTypes.json": {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "$id": "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/10/definitions/parameters/validValueTypes.json",
                      "$comment": "This schema fragment makes it a little easier to compose the valid properties\nfor DSC Configuration document parameters. As-written, values must be one of\nthose on this list - the schema definition for dataType excludes `null` and\nnumbers with fractional parts, like `3.5`.\n",
                      "type": [
                        "string",
                        "integer",
                        "object",
                        "array",
                        "boolean"
                      ]
                    }
                  },
                  "resourceType.json": {
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "$id": "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/10/definitions/resourceType.json",
                    "title": "DSC Resource fully qualified type name",
                    "description": "The namespaced name of the DSC Resource, using the syntax:\n\nowner[.group][.area]/name\n\nFor example:\n\n  - Microsoft.SqlServer/Database\n  - Microsoft.SqlServer.Database/User\n",
                    "type": "string",
                    "pattern": "^\\w+(\\.\\w+){0,2}\\/\\w+$",
                    "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nThe namespaced name of the DSC Resource, using the syntax:\n\n```yaml\nowner[.group][.area]/name\n```\n\nFor example:\n\n- `Microsoft.SqlServer/Database`\n- `Microsoft.SqlServer.Database/User`\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/definitions/resourcetype?view=dsc-3.0&preserve-view=true\n",
                    "patternErrorMessage": "Invalid type name. Valid resource type names always define an owner and a name separated by a\nslash, like `Microsoft/OSInfo`. Type names may optionally include a group and area to namespace\nthe resource under the owner, like `Microsoft.Windows/Registry`.\n"
                  },
                  "instanceName.json": {
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "$id": "https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2023/10/definitions/instanceName.json",
                    "title": "Instance name",
                    "description": "The short, human-readable name for a DSC Resource instance. Must be unique within a DSC Configuration document. Must be a non-empty string containing only letters, numbers, and spaces.",
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9 ]+$",
                    "minLength": 1,
                    "patternErrorMessage": "Invalid value for instance name. An instance name must be a non-empty string containing only\nletters, numbers, and spaces.\n",
                    "markdownDescription": "***\n[_Online Documentation_][01]\n***\n\nDefines the short, human-readable name for a DSC Resource instance. This property must be unique\nwithin a DSC Configuration document. If any resource instances share the same name, DSC raises an\nerror.\n\nThe instance name must be a non-empty string containing only letters, numbers, and spaces.\n\n[01]: https://learn.microsoft.com/powershell/dsc/reference/schemas/config/resource?view=dsc-3.0&preserve-view=true#name\n"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
