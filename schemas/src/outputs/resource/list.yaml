# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id:     <HOST>/<PREFIX>/<VERSION>/outputs/resource/list.yaml

title: dsc resource list result
description: >-
  Describes the return data for a DSC Resource instance from the
  `dsc resource list` command.

type: object
properties:
  type:
    # Even though I used the defined type here, I noticed that the Test*
    # resources don't follow that pattern - their type name is just a name,
    # no prefix. Should we have a different schema for those, or should this
    # be relaxed?
    $ref: /<PREFIX>/<VERSION>/definitions/resourceType.yaml
  kind:
    $ref: /<PREFIX>/<VERSION>/definitions/resourceKind.yaml
  version:
    # Only the Test* resources seem to have this field populated.
    $ref: /<PREFIX>/<VERSION>/definitions/semver.yaml
  capabilities:
    title: Resource capabilities
    description: >-
      Defines the list of DSC operations the resource is compatible with. If the resource doesn't
      list a given operation, like `set` or `export`, the resource can't be used for those
      operations. The exception to this is `test` - DSC uses synthetic testing for resources that
      don't have the `test` capability.
    type: array
    items:
      type: string
      enum:
        - get
        - set
        - setHandlesExist
        - whatIf
        - test
        - delete
        - export
        - resolve
  description:
    title: Resource Description
    description: >-
      A short synopsis of the DSC Resource's purpose.
    # Should this include a maximum length or a pattern that forbids newlines?
    type: string
  path:
    # This value seems to mean something different for the Test* resources
    title: Path
    description: >-
      Indicates the path to the DSC Resource on the file system.
    type: string
  directory:
    # This value seems to mean something different for the Test* resources
    title: Directory
    description: >-
      Indicates the path to the folder containing the DSC Resource on the file
      system.
    type: string
  implementedAs:
    title: Implemented as
    description: >-
      Indicates how the DSC Resource was implemented.
    oneOf:
      - title: Standard implementation
        description: >-
          Indicates that the DSC Resource is implemented as one of the standard
          implementations built into DSC.
        type: string
        enum:
          - command
      
      # Need to understand how this works to document it more usefully
      - title: Custom implementation
        description: >-
          Indicates that the DSC Resource uses a custom implementation.
        type: object
        required:
          - custom
        properties:
          custom:
            title: Custom implementation name
            description: >-
              The name of the custom implementation.
            type: string
  author:
    # Only the Test* resources seem to have this field populated.
    title: Author
    description: >-
      Indicates the name of the person or organization that developed and
      maintains the DSC Resource.
    type:
      - string
      - 'null'
  properties:
    # Only the Test* resources seem to have this field populated.
    title: Properties
    description: >-
      Defines the DSC Resource's property names.
    type: array
    items:
      type: string
      pattern: ^\w+$
  requireAdapter:
    title: Required DSC Resource Adapter
    description: >-
      Defines the fully qualified type name of the DSC Resource Adapter the
      DSC Resource depends on.
    oneOf:
      - $ref: /<PREFIX>/<VERSION>/definitions/resourceType.yaml
      - type: 'null'
  manifest:
    $ref: /<PREFIX>/<VERSION>/resource/manifest.yaml